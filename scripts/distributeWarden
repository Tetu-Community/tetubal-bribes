#!/usr/bin/env node

const ethers = require('ethers')
const BigNumber = require('bignumber.js')
const { Command } = require('commander')
const { request, gql } = require('graphql-request')
const uniq = require('lodash.uniq')
const zipObject = require('lodash.zipobject')

const SNAPSHOT_GRAPHQL_ENDPOINT = 'https://hub.snapshot.org/graphql'
const WARDEN_QUEST_BOARD_ADDRESS = '0x8b2ba835056965808aD88e7Ad7866BD57aE75839'
const USDC_ADDRESS = '0x2791Bca1f2de4661ED88A30C99A7a9449Aa84174'

function getProvider (chain) {
  const urlStr = process.env[`${chain.toUpperCase()}_RPC_HTTP`]
  if (!urlStr) throw new Error(`no RPC provider for chain ${chain} found!`)
  const u = new URL(urlStr)
  return new ethers.providers.JsonRpcProvider({
    url: u.origin + u.pathname,
    user: u.username,
    password: u.password
  })
}

async function getVotesByProposal (proposalId) {
  const resp = await request(
    SNAPSHOT_GRAPHQL_ENDPOINT,
    gql`
    query {
      votes (
        first: 1000,
        skip: 0,
        where: {
          proposal: "${proposalId}"
        }
        orderBy: "created",
        orderDirection: desc
      ) {
        id
        voter
        vp
        choice
      }
    }
  `
  )

  if (resp.votes >= 1000) throw new Error('too many votes! need to update code')

  return resp.votes
}

async function getChoicesByProposal (proposalId) {
  const proposalResp = await request(SNAPSHOT_GRAPHQL_ENDPOINT, gql`
    query {
      proposals (
        where: {
          id: "${proposalId}"
        }
      ) {
        id
        title
        body
        choices
        start
        end
        snapshot
        state
        scores
        scores_by_strategy
        scores_total
        scores_updated
        author
        space {
          id
          name
        }
      }
      }
  `)

  if (proposalResp.proposals.length === 0) return []

  const ret = {}
  for (const i in proposalResp.proposals[0].choices) {
    ret[parseInt(i, 10) + 1] = proposalResp.proposals[0].choices[i].split('(')[1].split(')')[0]
  }
  return ret
}

const WARDEN_MULTI_MERKLE_INTERFACE = new ethers.utils.Interface(require('../abi/warden/MultiMerkleDistributor.json'))

async function main ({ claimTx, filterPeriod, liquidationPrice, proposalId, silent }) {
  const provider = getProvider('mainnet')
  const receipt = await provider.getTransactionReceipt(claimTx)
  if (!receipt) throw new Error('could not get tx receipt for claim transaction')

  const questBoardContract = new ethers.Contract(
    WARDEN_QUEST_BOARD_ADDRESS,
    require('../abi/warden/QuestBoard.json'),
    provider
  )

  const filterPeriods = filterPeriod || []
  let claims = []

  for (const log of receipt.logs) {
    try {
      const parsed = WARDEN_MULTI_MERKLE_INTERFACE.parseLog(log)

      claims.push({
        questId: parsed.args.questID,
        token: parsed.args.rewardToken,
        amount: parsed.args.amount,
        period: parsed.args.period
      })
    } catch (err) {
      // nada
    }
  }

  console.log(`found ${claims.length} claims`)

  if (filterPeriods.length > 0) {
    claims = claims.filter(c => filterPeriods.includes(c.period.toString()))
    console.log(`found ${claims.length} claims after filtering`)
  }

  // add gauge to claims
  const questIds = uniq(claims.map(c => c.questId))
  await Promise.all(questIds.map(async function (questId) {
    const res = await questBoardContract.quests(questId)
    for (const claim of claims) {
      if (claim.questId === questId) claim.gauge = res.gauge
    }
  }))

  // add token symbol to claims
  const tokenAddresses = uniq(claims.map(c => c.token))
  await Promise.all(tokenAddresses.map(async function (tokenAddress) {
    const tokenContract = new ethers.Contract(
      tokenAddress,
      require('../abi/ERC20.json'),
      provider
    )
    const symbol = await tokenContract.symbol()
    const decimals = await tokenContract.decimals()
    for (const claim of claims) {
      if (claim.token === tokenAddress) {
        claim.tokenSymbol = symbol
        claim.tokenDecimals = decimals
      }
    }
  }))

  const liquidationPrices = {}
  for (const val of (liquidationPrice || [])) {
    liquidationPrices[val.split('=')[0].toLowerCase()] = BigNumber(val.split('=')[1])
  }

  const votes = await getVotesByProposal(proposalId)
  const choiceNumberToGaugeAddressPrefix = await getChoicesByProposal(proposalId)

  // gauge => { user => vp }
  const votesByGauge = {}

  // choice => total
  const totalsByGauge = {}

  // gauge => { user => percent }
  const votePercentageByGauge = {}

  // token => { user => amount }
  const initialBribeTokenAmounts = {}

  // token => amount
  const initialBribeTokenTotals = {}

  // user => amount
  const usdcBribeDistributions = {}

  // calculate votes
  for (const v of votes) {
    const weightSum = BigNumber.sum(...Object.values(v.choice))

    for (const [choiceNumber, weight] of Object.entries(v.choice)) {
      const gauge = choiceNumberToGaugeAddressPrefix[choiceNumber]
      if (!votesByGauge[gauge]) votesByGauge[gauge] = {}
      votesByGauge[gauge][v.voter] = BigNumber(v.vp).times(weight).div(weightSum)
    }
  }

  // calculate totals
  for (const [gauge, votes] of Object.entries(votesByGauge)) {
    totalsByGauge[gauge] = BigNumber.sum(...Object.values(votes))
  }

  // calculate percentage
  for (const [gauge, votes] of Object.entries(votesByGauge)) {
    votePercentageByGauge[gauge] = {}

    for (const [user, vp] of Object.entries(votes)) {
      votePercentageByGauge[gauge][user] = BigNumber(vp).div(totalsByGauge[gauge])
    }
  }

  for (const claim of claims) {
    for (const [gaugePrefix, votePercentages] of Object.entries(votePercentageByGauge)) {
      // only match correct gauge
      if (!claim.gauge.toLowerCase().includes(gaugePrefix.toLowerCase())) continue

      if (!initialBribeTokenAmounts[claim.tokenSymbol]) initialBribeTokenAmounts[claim.tokenSymbol] = {}

      for (const [user, percent] of Object.entries(votePercentages)) {
        if (!initialBribeTokenAmounts[claim.tokenSymbol][user]) initialBribeTokenAmounts[claim.tokenSymbol][user] = BigNumber(0)
        initialBribeTokenAmounts[claim.tokenSymbol][user] = initialBribeTokenAmounts[claim.tokenSymbol][user].plus(
          BigNumber(claim.amount.toString()).shiftedBy(0 - claim.tokenDecimals).times(percent)
        )
      }
    }
  }

  for (const [symbol, data] of Object.entries(initialBribeTokenAmounts)) {
    initialBribeTokenTotals[symbol] = BigNumber.sum(...Object.values(data))
  }

  console.log('Found Warden claims:')
  console.log(JSON.stringify(initialBribeTokenTotals, null, 2))
  console.log('')
  console.log('')

  for (const [symbol, data] of Object.entries(initialBribeTokenAmounts)) {
    const liquidationPrice = symbol.toLowerCase() === 'usdc' ? BigNumber(1) : liquidationPrices[symbol.toLowerCase()]
    if (!liquidationPrice) throw new Error(`must specify liquidation price for ${symbol}`)

    for (const [user, amount] of Object.entries(data)) {
      if (!usdcBribeDistributions[user]) usdcBribeDistributions[user] = BigNumber(0)
      usdcBribeDistributions[user] = usdcBribeDistributions[user].plus(
        amount.times(liquidationPrice)
      )
    }
  }

  const totalUsdc = BigNumber.sum(...Object.values(usdcBribeDistributions))

  const ret = {
    token: USDC_ADDRESS,
    amounts: zipObject(
      Object.keys(usdcBribeDistributions),
      Object.values(usdcBribeDistributions).map(bn => bn.toFixed(2))
    )
  }

  if (!silent) {
    console.log(`Total USDC to distribute: $${totalUsdc.toFixed(2)}`)
    console.log('Please check that this is sufficiently close to the amount that was bridged from mainnet.')
    console.log('You may need to adjust --liquidationPrice parameters if not.')
    console.log('')
    console.log('')
    console.log(ret)
    console.log('\n\n')
    console.log('## csv')
    console.log(Object.entries(usdcBribeDistributions).map(([user, amount]) => `erc20,${USDC_ADDRESS},${user},${amount.toFixed(6, 1)},`).join('\n'))
  }

  return ret
}

if (require.main === module) {
  const program = new Command()
  program.description('Calculate Warden bribe distributions')
  program.requiredOption('-p, --proposalId <id>')
  program.requiredOption('-tx, --claimTx <txHash>')
  program.option('-fp, --filterPeriod [periods...]', 'warden periods to filter on')
  program.option('-lp, --liquidationPrice [prices...]', 'liquidation prices in USDC for tokens in the format SYMBOL=price')
  program.parse()
  main(program.opts())
}

module.exports = main
